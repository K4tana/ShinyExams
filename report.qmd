---
title: "Shiny Exams Report"
format: pdf
execute:
  echo: false
  output: false
  warning: false
params: 
  df: NULL
  wishlist: NULL
---
```{r Initialization}
library(tidyverse)
library(patchwork)

df <- params[[1]] |> as.data.frame() #extract data frame from list.
wishlist <- params[[2]] |> as.data.frame()

df[df=="none"] <- NA
#define the plotter function
plotter <- function(data=NULL,axis1=NULL,filler=NULL,type=NULL){
    p <- data |> ggplot(aes(x=axis1))+
      theme(panel.grid.major = element_blank(), 
            panel.background = element_blank(), 
            panel.grid.minor = element_blank(),
            axis.line = element_line(colour = "black"),
            axis.text.x = element_text(size = 12),
            text = element_text(size = 12))
    #add fill
    if (type == "Boxplot" && !is.na(filler)) {
      p <- p + aes_string(fill = filler) +
        scale_fill_manual(values = c("#59B4AB", "#D7B365"))
    } else if (!is.na(filler)) {
      p <- p + facet_wrap(as.formula(paste("~", filler)))
    }
    #add geoms
    if (type == "Boxplot") {
      p <- p + geom_boxplot() +
        theme(axis.ticks.y = element_blank(), 
              axis.text.y = element_blank())
    } else if (type == "Density Plot") {
      p <- p + geom_density()
    } else if (type == "Histogram") {
      p <- p + geom_histogram()
    }
    #add titles
    title <- ifelse(!is.null(filler),paste0(type," of ", axis1," by ",filler),paste0(type," of ", axis1))
    p + labs(title = title)
    return(p)
}
layouter <- function(rows=NULL){
  #determines plot output grid columns based on integer division of row numbers
  x <- c(rows%/%2, rows%/%3)
  y <- which(x==min(x))
  return(ifelse(y==1,2,3))
}
```
## List of Exports
The following items were selected for export.
```{r Exportlist}
print(wishlist)
```

## Detailed Exports
In this section, the dailed reports you chose will be shown.
```{r Statistics Export Block}
#This whole block is conditional on the wishlist table.
if("Statistics" %in% whishlist$desire_outcome){
  heading_stats <- "### Selected Variable Statistics\n"
  heading_stats
}
if("Statistics" %in% whishlist$desire_outcome){
  #Initialize the results table and variables to process
  results <- data.frame()
  vars <- wishlist[wishlist$desire_outcome=="Statistics", "Variable"]
  #construct a results vector per variable 
  for(i in 1:length(vars)){
    splitter <- str_split_1(wishlist[wishlist$desire_outcome=="Statistics","Exported Statistics"][i], ",")
    #construct the vector. No need to iterate over elements of splitter, as we re-construct the data frame later anyways.
    insert <- if(is.numeric(df[vars[i]])){
      c(
        if("Mean" %in% splitter){
          df |> select(vars[i]) |> mean(na.rm = TRUE)
          }else{NA},
        if("SD" %in% splitter){
          df |> select(vars[i]) |> sd(na.rm = TRUE)
          }else{NA},
        if("Min" %in% splitter){
          df |> select(vars[i]) |> min(na.rm = TRUE)
          }else{NA},
        if("Max" %in% splitter){
          df |> select(vars[i]) |> max(na.rm = TRUE)
          }else{NA},
        if("N" %in% splitter){
          df |> na.omit(vars[i]) |> nrow()
          }else{NA},)
    }else{
      c(NA,NA,NA,NA,
        if("N" %in% splitter){
          df |> na.omit(vars[i]) |> nrow()
        }else{
          NA
        })
    }
    results <- rbind(results, insert) #bind results to the df as rows.
  }
  #output colnames
  colnames(results) <- c("Mean", "Standard Deviation", "Min", "Max", "N")
  #filter out columns that only contain NAs for visual delight.
  results <- results |> select_if(function(x) !all(is.na(x)))
  
  #output the table
  results
}
```

```{r Plot Output Block}
#This whole section is conditional on Plots being in the section.
if(str_detect(wishlist$desire_outcome, "Plot")){
  heading_plot <- "### Plot Exports\n"
  summary_str
}
if(str_detect(wishlist$desire_outcome, "Plot")){
  plots <- list()
  #construct a df
  vars <- wishlist[wishlist$desire_outcome=="Plot",1:3]
  #set NAs to zero so that
  for(i in nrow(vars)){
    p <- plotter(df, axis1 = vars[i,"Variable"], filler = vars[i,"Separator Variable"], type = vars[i,"Plot Type"])
    plots[[i]] <- p
  }
  wrap_plots(plots,ncol = layouter(nrow(vars)))
}
  
```

### About Shiny Exams
ShinyExams was created by Oliver D. Reithmaier. For feature requests, bug reports or other issues, visit [the Project Github Page](https://github.com/K4tana/ShinyExams). 



